version: 2.1

orbs:
  node: circleci/node@5.1.0
  slack: circleci/slack@4.4.2

executors:
  node-executor:
    docker:
      - image: cimg/node:18.19
  mobile-executor:
    macos:
      xcode: "15.0.0"

commands:
  setup-pnpm:
    description: "Setup pnpm package manager"
    steps:
      - run:
          name: Install pnpm
          command: |
            curl -fsSL https://get.pnpm.io/install.sh | sh -
            echo 'export PNPM_HOME="$HOME/.local/share/pnpm"' >> $BASH_ENV
            echo 'export PATH="$PNPM_HOME:$PATH"' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Get pnpm version
          command: pnpm --version

  install-dependencies:
    description: "Install project dependencies"
    steps:
      - checkout
      - setup-pnpm
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pnpm-lock.yaml" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: pnpm install --frozen-lockfile
      - save_cache:
          paths:
            - node_modules
            - ~/.pnpm-store
          key: v1-dependencies-{{ checksum "pnpm-lock.yaml" }}

  run-tests:
    description: "Run test suite"
    parameters:
      test-command:
        type: string
        default: "pnpm test"
    steps:
      - run:
          name: Run tests
          command: << parameters.test-command >>

  run-lint:
    description: "Run linting and formatting checks"
    steps:
      - run:
          name: Run ESLint
          command: pnpm lint
      - run:
          name: Run Prettier check
          command: pnpm format:check

  run-type-check:
    description: "Run TypeScript type checking"
    steps:
      - run:
          name: Type check
          command: pnpm type-check

  build-applications:
    description: "Build all applications"
    steps:
      - run:
          name: Build applications
          command: pnpm build

  deploy-staging:
    description: "Deploy to staging environment"
    steps:
      - run:
          name: Deploy to staging
          command: |
            echo "Deploying to staging environment..."
            # Add staging deployment logic here
            pnpm deploy:staging

  deploy-production:
    description: "Deploy to production environment"
    steps:
      - run:
          name: Deploy to production
          command: |
            echo "Deploying to production environment..."
            # Add production deployment logic here
            pnpm deploy:production

jobs:
  install:
    executor: node-executor
    steps:
      - install-dependencies

  lint:
    executor: node-executor
    steps:
      - install-dependencies
      - run-lint

  type-check:
    executor: node-executor
    steps:
      - install-dependencies
      - run-type-check

  test:
    executor: node-executor
    parallelism: 4
    steps:
      - install-dependencies
      - run-tests:
          test-command: pnpm test --reporter=verbose --coverage
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage
          destination: coverage

  e2e:
    executor: node-executor
    steps:
      - install-dependencies
      - run:
          name: Install Playwright browsers
          command: pnpm exec playwright install --with-deps
      - run:
          name: Run E2E tests
          command: pnpm e2e
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: playwright-report
          destination: playwright-report

  build:
    executor: node-executor
    steps:
      - install-dependencies
      - build-applications
      - store_artifacts:
          path: apps/web/.next
          destination: web-build
      - store_artifacts:
          path: apps/api/dist
          destination: api-build
      - store_artifacts:
          path: packages/*/dist
          destination: packages-build

  security:
    executor: node-executor
    steps:
      - install-dependencies
      - run:
          name: Security audit
          command: pnpm audit --audit-level moderate
      - run:
          name: Dependency check
          command: |
            # Add dependency vulnerability scanning
            echo "Running dependency vulnerability scan..."

  performance:
    executor: node-executor
    steps:
      - install-dependencies
      - build-applications
      - run:
          name: Lighthouse CI
          command: pnpm lighthouse

  database:
    executor: node-executor
    steps:
      - install-dependencies
      - run:
          name: Database tests
          command: pnpm db:test
      - run:
          name: Validate migrations
          command: pnpm db:validate

  mobile:
    executor: mobile-executor
    steps:
      - checkout
      - setup-pnpm
      - run:
          name: Install Expo CLI
          command: npm install -g @expo/cli
      - run:
          name: Install mobile dependencies
          command: |
            cd apps/mobile
            pnpm install
      - run:
          name: Run mobile tests
          command: |
            cd apps/mobile
            pnpm test
      - run:
          name: Build mobile app
          command: |
            cd apps/mobile
            pnpm build

  deploy-staging-job:
    executor: node-executor
    steps:
      - install-dependencies
      - build-applications
      - deploy-staging
      - slack/notify:
          event: success
          template: success_tagged_deploy_1
          mentions: "U0123456789" # Replace with actual Slack user ID

  deploy-production-job:
    executor: node-executor
    steps:
      - install-dependencies
      - build-applications
      - deploy-production
      - slack/notify:
          event: success
          template: success_tagged_deploy_1
          mentions: "U0123456789" # Replace with actual Slack user ID

workflows:
  version: 2

  ci:
    jobs:
      - install
      - lint:
          requires:
            - install
      - type-check:
          requires:
            - install
      - test:
          requires:
            - install
      - e2e:
          requires:
            - install
      - build:
          requires:
            - install
      - security:
          requires:
            - install
      - performance:
          requires:
            - build
      - database:
          requires:
            - install
      - mobile:
          requires:
            - install

  deploy-staging:
    jobs:
      - deploy-staging-job:
          filters:
            branches:
              only: develop
          requires:
            - lint
            - type-check
            - test
            - e2e
            - build
            - security
            - performance
            - database
            - mobile

  deploy-production:
    jobs:
      - deploy-production-job:
          filters:
            branches:
              only: main
          requires:
            - lint
            - type-check
            - test
            - e2e
            - build
            - security
            - performance
            - database
            - mobile

  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - security
      - performance
      - database
